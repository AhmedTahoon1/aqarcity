- solve proplems with replit
- update search (advanced Select box Like Nawy)
- Page For Mortage Calculator
- Create Legal Pages




الميزة المقترحة: البحث المتقدم باستخدام الخريطة.

الوصف والفوائد: السماح للمستخدم برسم منطقة مخصصة على الخريطة (دائرة أو مضلع) لعرض العقارات الموجودة داخل هذه المنطقة فقط. هذه الميزة قوية جدًا وتوفر للمستخدمين دقة عالية في البحث عن الموقع الذي يناسبهم تمامًا.
طريقة التنفيذ: استخدام مكتبة الرسم (Drawing Library) المدمجة في Google Maps API. عند اكتمال الرسم، يتم التقاط إحداثيات الشكل الهندسي وإرسالها إلى الواجهة الخلفية كجزء من استعلام البحث.

الميزة المقترحة: تقسيم الكود (Code Splitting) على مستوى المسارات (Routes).

الوصف والفوائد: بدلاً من تحميل كل كود جافاسكريبت الخاص بالموقع مرة واحدة، يتم تحميل كود كل صفحة فقط عند زيارتها. على سبيل المثال، المستخدم العادي لا يحتاج إلى تحميل كود "لوحة تحكم المدير" الثقيلة. هذا يقلل حجم الحزمة الأولية ويسرع من ظهور الصفحة الأولى للمستخدم.
طريقة التنفيذ: استخدام React.lazy() و <Suspense> لتقسيم المكونات الخاصة بكل صفحة. Vite و Wouter (مكتبة التوجيه) يدعمان هذا النمط بسهولة.
3. ميزات وظيفية جديدة (New Features)
الميزة المقترحة: أداة مقارنة العقارات (Property Comparison Tool).

الوصف والفوائد: السماح للمستخدمين بتحديد 2 إلى 4 عقارات وإضافتها إلى قائمة "مقارنة". تعرض صفحة المقارنة تفاصيل هذه العقارات جنبًا إلى جنب في جدول منظم، مما يسهل على المشتري اتخاذ قرار مستنير بناءً على الفروقات الرئيسية.
طريقة التنفيذ: إدارة قائمة العقارات المراد مقارنتها في حالة العميل (Client State) باستخدام Zustand أو حتى localStorage. يتم بعد ذلك إنشاء صفحة جديدة (/compare) تقوم بعرض هذه البيانات المحددة في واجهة مقارنة.
الميزة المقترحة: حفظ البحث وتنبيهات البريد الإلكتروني (Saved Searches & Alerts).

الوصف والفوائد: تمكين المستخدمين المسجلين من حفظ معايير البحث الخاصة بهم (مثل "شقة من 3 غرف نوم في وسط دبي بسعر أقل من 2 مليون درهم"). يمكن للمنصة بعد ذلك إرسال تنبيهات عبر البريد الإلكتروني أو إشعارات داخل الموقع عند إضافة عقار جديد يطابق هذه المعايير. هذه الميزة تزيد من تفاعل المستخدمين وتضمن عودتهم للموقع.
طريقة التنفيذ:
الواجهة الأمامية: إضافة زر "حفظ البحث" الذي يرسل معايير الفلترة الحالية إلى الواجهة الخلفية.
الواجهة الخلفية: إنشاء جدول جديد في قاعدة البيانات (saved_searches) لتخزين عمليات البحث لكل مستخدم.
إنشاء مهمة مجدولة (Cron Job) تعمل بشكل دوري للتحقق من وجود عقارات جديدة تطابق عمليات البحث المحفوظة وإرسال إشعارات.
الميزة المقترحة: دليل الأحياء والمناطق (Neighborhood Guides).

الوصف والفوائد: إنشاء صفحات محتوى غنية بالمعلومات حول المناطق والأحياء الرئيسية في الإمارات (مثل مرسى دبي، الخليج التجاري). تحتوي هذه الصفحات على معلومات حول نمط الحياة، المدارس، متوسط الأسعار، صور، ومقاطع فيديو. هذه الميزة لا تقدم قيمة كبيرة للمستخدمين فحسب، بل إنها ممتازة لتحسين محركات البحث (SEO) وجذب زيارات جديدة للموقع.
طريقة التنفيذ: إضافة قسم جديد في لوحة تحكم المدير لإدارة محتوى هذه الصفحات. يتم بعد ذلك عرض هذا المحتوى في صفحات مخصصة في الموقع.



-----------------------------------------------------

خطة تحسين قاعدة البيانات
الخطوة 1: إضافة فهارس لقاعدة البيانات (Database Indexing)
الميزة المضافة/المحسنة: تحسين سرعة استعلامات البحث والفلترة بشكل كبير. عندما ينمو حجم البيانات في جداول مثل properties و users، تصبح عمليات البحث التي تستخدم WHERE أو ORDER BY بطيئة. الفهرس يعمل كـ "جدول محتويات" مُعد مسبقًا، مما يسمح لقاعدة البيانات بالعثور على البيانات المطلوبة بسرعة فائقة بدلاً من فحص كل صف في الجدول.

طريقة التحسين/الإنشاء:

تحديد الأعمدة المرشحة للفهرسة: سنقوم بمراجعة مخطط قاعدة البيانات في shared/schema.ts وتحديد الأعمدة التي تُستخدم بشكل متكرر في عمليات البحث والفلترة والترتيب. أفضل المرشحين هم:

في جدول properties: أعمدة city, property_type, status, price, agent_id, developer_id.
في جدول users: عمود email (على الرغم من أنه فريد، إلا أن الفهرس الصريح يسرّع عمليات البحث).
في جدول inquiries: أعمدة property_id و user_id.
تعديل مخطط Drizzle: سنقوم بإضافة الفهارس مباشرة في تعريف الجداول باستخدام دالة .index() التي يوفرها Drizzle. مثال على كيفية إضافته لجدول العقارات:

Typescript

Apply
// in shared/schema.ts
export const properties = pgTable('properties', {
  // ... all other columns
  city: varchar('city', { length: 100 }).notNull(),
  propertyType: propertyTypeEnum('property_type').notNull(),
}, (table) => {
  return {
    cityIndex: index("city_idx").on(table.city),
    propertyTypeIndex: index("property_type_idx").on(table.propertyType),
  };
});
إنشاء وتطبيق الترحيل (Migration):

بعد تعديل المخطط، سنقوم بتشغيل الأمر npm run db:generate لإنشاء ملف ترحيل جديد يحتوي على أوامر SQL لإنشاء هذه الفهارس.
بعدها، سنقوم بتشغيل npm run db:migrate لتطبيق هذا الترحيل على قاعدة البيانات الفعلية.
الخطوة 2: تحسين الاستعلامات المعقدة (Optimizing Complex Queries)
الميزة المضافة/المحسنة: تقليل الحمل على الخادم وقاعدة البيانات وتسريع استجابة الـ API. بعض العمليات، مثل حساب عدد العقارات الإجمالي لعملية التقسيم (Pagination) أو جلب بيانات مرتبطة من عدة جداول، يمكن أن تكون غير فعالة إذا تمت في طبقة التطبيق (Node.js) بدلاً من قاعدة البيانات مباشرة.

طريقة التحسين/الإنشاء:

استخدام تجميعات قاعدة البيانات (Database Aggregations): بدلاً من جلب قائمة طويلة من السجلات ثم حساب عددها في الكود، يمكننا أن نطلب من قاعدة البيانات أن تقوم بالعد مباشرة. Drizzle يدعم هذا بسهولة باستخدام sqlcount``.

مثال: في وظيفة جلب العقارات، يمكن تعديل الاستعلام ليجلب العدد الإجمالي للعقارات التي تطابق شروط الفلترة في استعلام واحد فعال بدلاً من استعلامين منفصلين أو معالجة لاحقة.
مراجعة عمليات الربط بين الجداول (Joins):

سنقوم بمراجعة الاستعلامات التي تربط بين جداول متعددة (مثل properties مع agents و developers) للتأكد من أنها مكتوبة بأفضل طريقة ممكنة.
في بعض الحالات، قد يكون من الأفضل اختيار أعمدة محددة (select({ ... })) بدلاً من جلب كل الأعمدة (select()) لتقليل حجم البيانات المنقولة.
استخدام العروض (Database Views) (تقنية متقدمة):

للبيانات التي يتم طلبها بشكل متكرر ومعقد (مثل "ملخص العقار" الذي يجمع دائمًا بيانات من 3 جداول)، يمكننا إنشاء "عرض" (View) في قاعدة البيانات. العرض هو جدول افتراضي مبني على استعلام معقد. هذا يبسط الكود في التطبيق وقد يحسن الأداء لأن منطق الربط المعقد يكون داخل قاعدة البيانات نفسها.
